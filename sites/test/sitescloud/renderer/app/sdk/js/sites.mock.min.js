/**
 * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
 * Licensed under the Universal Permissive License v 1.0 as shown at http://oss.oracle.com/licenses/upl.
 */
// mockup the SDK for testing
var SitesSDK = function () {

	var getPropertyEvent = 'scsMockGetProperty',
		setPropertyEvent = 'scsMockSetProperty',
		getPropertyResponseEvent = 'scsMockGetPropertyResponse',
		settingsUpdatedResponseEvent = 'scsMockSettingsUpdatedResponse',
		callbacks = {
			'getProperty': {},
			'setProperty': {}
		},
		SDK = {
			'getProperty': function (property, callback) {
				// record the callback
				callbacks.getProperty[property] = callback;

				// encode the event data
				var eventData = JSON.stringify({
					'eventName': getPropertyEvent,
					'eventPayload': {
						'propertyName': property
					}
				});

				// send the event asking for the property
				console.log('Component sent event: ' + eventData);
				parent.postMessage(eventData, '*');
			},
			'setProperty': function (property, value) {
				// encode the event data
				var eventData = JSON.stringify({
					'eventName': setPropertyEvent,
					'eventPayload': {
						'propertyName': property,
						'propertyValue': value
					}
				});

				// send setProperty message to the page
				console.log('Component sent event: ' + eventData);

				parent.postMessage(eventData, '*');
			},
			'getSiteProperty': function (property, callback) {
				callbacks.getProperty[property] = callback;

				// encode the event data
				var eventData = JSON.stringify({
					'eventName': getPropertyEvent,
					'eventPayload': {
						'propertyName': property
					}
				});

				// send the event asking for the property
				console.log('Component sent event: ' + eventData);
				parent.postMessage(eventData, '*');
			},
			'setHeight': function (value) {
				// don't do anything
			},
			'subscribe:': function (messageType, callback) {
				console.log('subscribe: messageType=' + messageType);
				callbacks[messageType] = {
					'callback': callback
				};
			},
			'MESSAGE_TYPES': {
				'SETTINGS_UPDATED': 'SETTINGS_UPDATED',
				'TRIGGER_ACTIONS': 'TRIGGER_ACTIONS',
				'COPY_CUSTOM_DATA': 'COPY_CUSTOM_DATA',
				'PASTE_CUSTOM_DATA': 'PASTE_CUSTOM_DATA',
				'EXECUTE_ACTION': 'EXECUTE_ACTION',
				'GET_ACTIONS': 'GET_ACTIONS',
				'GET_TRIGGERS': 'GET_TRIGGERS'
			}
		};

	// mock the Sites SDK messages
	var receiveMessage = function (event) {
		try {
			var data = JSON.parse(event.data);

			if (data && data.eventName === getPropertyResponseEvent) {
				console.log('Component received event: ' + event.data);

				if (callbacks.getProperty[data.eventPayload.propertyName]) {
					callbacks.getProperty[data.eventPayload.propertyName](data.eventPayload.propertyValue);
				}
			} else if (data && data.eventName === settingsUpdatedResponseEvent &&
				data.eventPayload && data.eventPayload.propertyName === 'customSettingsData') {
				console.log('Component received settingsUpdated event: ' + JSON.stringify(data.eventPayload));
				if (callbacks['SETTINGS_UPDATED']) {
					var payload = {
						'detail': {'message':
							{
								'property': data.eventPayload.propertyName,
								'value': data.eventPayload.propertyValue
							}
						}
					};
					callbacks['SETTINGS_UPDATED'].callback(payload);
				} else {
					console.log('  No callback for SETTINGS_UPDATED');
				}
			} else {
				console.log('component ignored event: ' + (data ? JSON.stringify(data) : ''));
			}
		} catch (e) {
			console.log('component ignored event: ' + e);
			console.log(event);
		}
	};
	window.addEventListener("message", receiveMessage, false);



	return SDK;
}();
